{
df$url[i] <- venues[[i]]$venue$url
}
else{
df$url[i] <- NA
}
}
no_venues = length(data$response$venues$items)
map <- ThinkToStart("Foursquare_map",token)
data
no_venues
no_venues = length(data$response$venues$items)
no_venues
data <- fromJSON(getURL(paste('https://api.foursquare.com/v2/users/self/venuehistory?oauth_token=',token,'&v=',format(Sys.time(), "%Y%m%d"),sep="")))
token <-ThinkToStart("Foursquare_auth",app_name="trial",app_id="2G3DTWTHJ2FJQ5CYJ0CDZ51ULNTKRIFNLFEP2SBFNC1RRXCJ",app_secret="UMXKEN3VF3FZKCVZKDKPBA3W3GBEJO1XEGJK3R4AANGCSGRL")
data <- fromJSON(getURL(paste('https://api.foursquare.com/v2/users/self/venuehistory?oauth_token=',token,'&v=',format(Sys.time(), "%Y%m%d"),sep="")))
require(devtools) #install if necessary (install.packages("devtools")
dev_mode(on=T)
library(rjson)
library(RCurl)
library(ThinkToStartR)
token <-ThinkToStart("Foursquare_auth",app_name="trial",app_id="2G3DTWTHJ2FJQ5CYJ0CDZ51ULNTKRIFNLFEP2SBFNC1RRXCJ",app_secret="UMXKEN3VF3FZKCVZKDKPBA3W3GBEJO1XEGJK3R4AANGCSGRL")
map <- ThinkToStart("Foursquare_map",token)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
map <- ThinkToStart("Foursquare_map",token)
data <- fromJSON(getURL(paste('https://api.foursquare.com/v2/users/self/venuehistory?oauth_token=',token,'&v=',format(Sys.time(), "%Y%m%d"),sep="")))
no_venues
data <- fromJSON(getURL(paste('https://api.foursquare.com/v2/users/self/venuehistory?oauth_token=',token,'&v=',format(Sys.time(), "%Y%m%d"),sep="")))
df = data.frame(no = 1:no_venues)
no_venues = length(data$response$venues$items)
df = data.frame(no = 1:no_venues)
no_venues
map <- ThinkToStart("Foursquare_map",token)
require(devtools) #install if necessary (install.packages("devtools")
dev_mode(on=T)
library(rjson)
library(RCurl)
library(ThinkToStartR)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
token <-ThinkToStart("Foursquare_auth",app_name="trial",app_id="2G3DTWTHJ2FJQ5CYJ0CDZ51ULNTKRIFNLFEP2SBFNC1RRXCJ",app_secret="UMXKEN3VF3FZKCVZKDKPBA3W3GBEJO1XEGJK3R4AANGCSGRL")
map <- ThinkToStart("Foursquare_map",token)
data <- fromJSON(getURL(paste('https://api.foursquare.com/v2/users/self/venuehistory?oauth_token=',token,'&v=',format(Sys.time(), "%Y%m%d"),sep="")))
no_venues = length(data$response$venues$items)
no_venues
df = data.frame(no = 1:no_venues)
for (i in 1:nrow(df)){
#Add Name and the location of the Venue
df$venue_name[i] <- venues[[i]]$venue$name
df$venue_lat[i] <- venues[[i]]$venue$location$lat
df$venue_lng[i] <- venues[[i]]$venue$location$lng
##########################
#Add the address of the location
if(length(venues[[i]]$venue$location$address)>0)
{
df$venue_address[i] <- venues[[i]]$venue$location$address
}
else{
df$venue_address[i] <- "No Address Available"
}
##########################
#Add the citiy of the location
if(length(venues[[i]]$venue$location$city)>0)
{
df$venue_city[i] <- venues[[i]]$venue$location$city
}
else{
df$venue_city[i] <- "No City Available"
}
##########################
#Add the number of check-ins of the venue
df$venue_checkinsCount[i] <- venues[[i]]$venue$stats[[1]]
##########################
#Add the URL of the URL if defined
if(length(venues[[i]]$venue$url)>0)
{
df$url[i] <- venues[[i]]$venue$url
}
else{
df$url[i] <- NA
}
}
map <- ThinkToStart("Foursquare_map",token)
no_venues = length(data$response$venues$items)
df = data.frame(no = 1:no_venues)
for (i in 1:nrow(df)){
#Add Name and the location of the Venue
df$venue_name[i] <- venues[[i]]$venue$name
df$venue_lat[i] <- venues[[i]]$venue$location$lat
df$venue_lng[i] <- venues[[i]]$venue$location$lng
##########################
#Add the address of the location
if(length(venues[[i]]$venue$location$address)>0)
{
df$venue_address[i] <- venues[[i]]$venue$location$address
}
else{
df$venue_address[i] <- "No Address Available"
}
##########################
#Add the citiy of the location
if(length(venues[[i]]$venue$location$city)>0)
{
df$venue_city[i] <- venues[[i]]$venue$location$city
}
else{
df$venue_city[i] <- "No City Available"
}
##########################
#Add the number of check-ins of the venue
df$venue_checkinsCount[i] <- venues[[i]]$venue$stats[[1]]
##########################
#Add the URL of the URL if defined
if(length(venues[[i]]$venue$url)>0)
{
df$url[i] <- venues[[i]]$venue$url
}
else{
df$url[i] <- NA
}
}
no_venues
data
data$response
data$response$venues
data$response$venues$items
data$response$venues$items
data$response$venues$items[1]
data$response$venues$items[2]
data$response$venues$items[2,1]
data$response$venues$items[2,2]
data$response$venues$items[2,2]
data$response$venues$items[2,2][1]
data$response$venues$items[2,2][2]
data$response$venues$items$venue$location
data$response$venues$items$venue$name
data$response$venues$items$venue$name[1]
data$response$venues$items$venue$location$address
data$response$venues$items$venue$location$address[1]
mydata = read.table("C:\\Users\\giza\\Desktop\\test.txt",sep = ",",header = TRUE)
mydata
View(mydata)
library(xlsx)
write.xlsx(mydata, "c:/mydata.xlsx")
library(xlsx)
library("rJava", lib.loc="~/R/win-library/3.1")
write.xlsx(mydata, "c:/mydata.xlsx")
library(xlsx)
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.1")
write.table(mydata, "c:/mydata.txt", sep="\t")
write.table(mydata, "d:/mydata.txt", sep="\t")
write.table(mydata, "d:/mydata.txt", sep=",")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.1")
detach("package:rJava", unload=TRUE)
library(foreign)
write.foreign(mydata, "C:\\Users\\giza\\Desktop\\test.txt", "c:/mydata.sps",   package="SPSS")
write.foreign(mydata, "C:/Users/giza/Desktop/test.txt", "c:/mydata.sps",   package="SPSS")
mydata = read.table("C:\\Users\\giza\\Desktop\\test.txt",sep = ",",header = TRUE)
mydata
class(mydata)
class(mydata$X61)
mydata = read.table("C:\\Users\\giza\\Desktop\\test.txt",sep = ",",header = TRUE,check.names = TRUE)
mydata
mydata = read.table("C:\\Users\\giza\\Desktop\\test.txt",sep = ",",header = TRUE,check.names = TRUE)
mydata = read.table("C:\\Users\\giza\\Desktop\\test.txt",sep = ",",header = TRUE)
mydata
View(mydata)
mydata = read.table("C:\\Users\\giza\\Desktop\\test.txt",sep = ",",header = TRUE)
source('~/.active-rstudio-document')
View(mydata)
source('~/.active-rstudio-document')
View(mydata)
m<-function(phai=seq(1,2*pi,by = pi/2),
alpha_s=seq(−2.15 * 10^−5,2.15 * 10^−5,by = .00001))
{
(1.036*10^-7+(-.012+9.41)*alpha_s)*cos(phai)+((-1.13*10^-7)+(9.41 * 10^-10)-(0.012*alpha_s))*sin(phai)-(3.63*10^-7)*sin(2*phai)
}
GA4 <- ga(type = "real-valued",elitism = 10,pcrossover = .8,
fitness = function(x) (m(x[1],x[2])),devtools
popSize = 50,
maxiter = 400,
min = c(0,−2.15 * 10^−5),
max = c(2*pi,2.15 * 10^−5),
names=c("phai","alpha_s"))
#-----------------------------------------------------------------------------------
curve(m,0,2*pi,xlab = "phai",ylab = "g(phai)")
abline(v=GA4@solution,lty=3)
abline(h = 0, lty = 3)
GA4@solution
require(rCharts)
install.packages("rCharts")
require(rCharts)
require(devtools)
install_github('rCharts','ramnathv')
require(devtools)
install_github('ramnathv/rCharts')
require(rCharts)
user <- getUser("JulianHi") #Set the username
userFriends <- user$getFriends()
userFollowers <- user$getFollowers()
userNeighbors <- union(userFollowers, userFriends) #merge followers and friends
userNeighbors.df = twListToDF(userNeighbors) #create the dataframe
user <- getUser("JulianHi") #Set the username
require(rCharts)
user <- getUser("JulianHi") #Set the username
install_github("twitteR", username="geoffjentry")
library(devtools)
install_github("twitteR", username="geoffjentry")
install_github('geoffjentry/twitteR')
all.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"))
library(devtools)
install_github('geoffjentry/twitteR')
tab=read.table(file = "D:/work/Research/location research/trajectory.csv")
View(tab)
tab=read.table(file = "D:/work/Research/location research/trajectory.csv",header = TRUE,sep = ",")
View(tab)
tabx=z[tab$day!="Sunday" & tab$day!="Saturday",]
tabx=tab[tab$day!="Sunday" & tab$day!="Saturday",]
weekdays=table(as.numeric(format.Date(tabx$time,"%H")))
tri=data.frame(tabx[1:1000,]$long,tabx[1:1000,]$lat)
View(tri)
cl = kcca(tri, k=3,family = kccaFamily(dist = distm))
library("flexclust")
cl = kcca(tri, k=3,family = kccaFamily(dist = distm))
library("geosphere")
cl = kcca(tri, k=3,family = kccaFamily(dist = distm))
image(cl)
points(tri)
c1=kcca(tri, k=3)
image(c1)
points(tri)
image(cl)
View(tabx)
x=r*cos(tabx[1:1000,]$lat) * cos(tabx[1:1000,]$long)
r=6371
x=r*cos(tabx[1:1000,]$lat) * cos(tabx[1:1000,]$long)
y=r*cos(tabx[1:1000,]$lat) * sin(tabx[1:1000,]$long)
tricart=data.frame(x,y)
View(tricart)
plot(x[1:10,],y[1:10,])
plot(tricart[1:10,])
plot(tricart[1:100,])
plot(tricart[1:1000,])
plot(tricart)
r=6371
x=r*cos(tabx[1:10000,]$lat) * cos(tabx[1:10000,]$long)
y=r*cos(tabx[1:10000,]$lat) * sin(tabx[1:10000,]$long)
r=6371
x=r*cos(tabx[1:10000,]$lat) * cos(tabx[1:10000,]$long)
y=r*cos(tabx[1:10000,]$lat) * sin(tabx[1:10000,]$long)
plot(tricart)
x=r*cos(tabx[1:10000,]$lat) * cos(tabx[1:10000,]$long)
y=r*cos(tabx[1:10000,]$lat) * sin(tabx[1:10000,]$long)
tricart=data.frame(x,y)
plot(tricart)
directory="D:/work/Research/location research/datasets/Geolife/Geolife Trajectories 1.3/Data"
setwd("D:/work/Research/location research/datasets/Geolife/Geolife Trajectories 1.3/Data")
dirs = list.files(directory)
dir = paste(dirs[1], "Trajectory", sep = "/")
z= NULL
dir = paste(dirs[1], "Trajectory", sep = "/")
dir
f=list.files(dir, pattern = "*plt", full.names = TRUE)[1]
f
z=as.data.frame(read.table(sep = ",",f,skip=6,stringsAsFactors=FALSE)
)
z$time = as.POSIXct(paste(z[,6],z[,7]),tz = "GMT")
z = z[,-c(3,5,6,7)]
names(z) = c("lat", "long", "elev", "time")
attributes(z$time)$tzone <- "Asia/Shanghai"
day=as.Date(z$time)
z$day=weekdays(day)
write.table(z, file = "D:/work/Research/location research/trajectory1.csv",row.names=FALSE, sep=",")
tab=read.table(file = "D:/work/Research/location research/trajectory1.csv",header = TRUE,sep = ",")
tabx=tab[tab$day!="Sunday" & tab$day!="Saturday",]
weekdays=table(as.numeric(format.Date(tabx$time,"%H")))
r=6371
x=r*cos(tab$lat) * cos(tabx$long)
y=r*cos(tabx$lat) * sin(tabx$long)
tricart=data.frame(x,y)
plot(tricart)
View(tabx)
View(tricart)
c2=kcca(tricart,k=3)
image(c2)
points(tricart)
c2=kcca(tricart,k=5)
image(c2)
points(tricart)
image(c2,col = "rainbow")
image(c2,col = "Rainbow")
image(c2,col = "green")
image(c2,col = family)
image(c2,col = col.rainbow)
col.rainbow <- rainbow(12)
image(c2,col = col.rainbow)
image(c2)
c2=kcca(tricart,k=7)
image(c2)
points(tricart)
image(c2)
c2=kcca(tricart,k=5)
image(c2)
c2=kcca(tricart,k=4)
image(c2)
points(tricart)
c2=kcca(tricart,k=5)
image(c2)
points(tricart)
c2=kcca(tricart,k=5)
image(c2)
points(tricart)
c2=kcca(tricart,k=5)
image(c2)
points(tricart)
c2=kcca(tricart,k=5)
image(c2)
points(tricart)
points(tricart[1,])
image(c2)
points(tricart[1,])
points(tricart)
f=list.files(dir, pattern = "*plt", full.names = TRUE)[2]
z=as.data.frame(read.table(sep = ",",f,skip=6,stringsAsFactors=FALSE))
z$time = as.POSIXct(paste(z[,6],z[,7]),tz = "GMT")
z = z[,-c(3,5,6,7)]
names(z) = c("lat", "long", "elev", "time")
attributes(z$time)$tzone <- "Asia/Shanghai"
day=as.Date(z$time)
z$day=weekdays(day)
write.table(z, file = "D:/work/Research/location research/trajectory1.csv",row.names=FALSE, sep=",")
#-------------------------------------------------
library("flexclust")
library("geosphere")
tab=read.table(file = "D:/work/Research/location research/trajectory1.csv",header = TRUE,sep = ",")
tabx=tab[tab$day!="Sunday" & tab$day!="Saturday",]
weekdays=table(as.numeric(format.Date(tabx$time,"%H")))
r=6371
x=r*cos(tab$lat) * cos(tabx$long)
y=r*cos(tabx$lat) * sin(tabx$long)
tricart=data.frame(x,y)
plot(tricart)
tri=data.frame(tabx$long,tabx$lat)
c2=kcca(tricart,k=5)
image(c2)
points(tricart)
points(tricart[1])
image(c2)
points(tricart[1])
points(tricart)
plot(tricart)
c2=kcca(tricart,k=3)
image(c2)
points(tricart)
f=list.files(dir, pattern = "*plt", full.names = TRUE)[3]
z=as.data.frame(read.table(sep = ",",f,skip=6,stringsAsFactors=FALSE))
z$time = as.POSIXct(paste(z[,6],z[,7]),tz = "GMT")
z = z[,-c(3,5,6,7)]
names(z) = c("lat", "long", "elev", "time")
attributes(z$time)$tzone <- "Asia/Shanghai"
day=as.Date(z$time)
z$day=weekdays(day)
write.table(z, file = "D:/work/Research/location research/trajectory1.csv",row.names=FALSE, sep=",")
#-------------------------------------------------
library("flexclust")
library("geosphere")
tab=read.table(file = "D:/work/Research/location research/trajectory1.csv",header = TRUE,sep = ",")
tabx=tab[tab$day!="Sunday" & tab$day!="Saturday",]
weekdays=table(as.numeric(format.Date(tabx$time,"%H")))
r=6371
x=r*cos(tab$lat) * cos(tabx$long)
y=r*cos(tabx$lat) * sin(tabx$long)
tricart=data.frame(x,y)
plot(tricart)
tri=data.frame(tabx$long,tabx$lat)
c2=kcca(tricart,k=3)
image(c2)
points(tricart)
tri
tri=data.frame(tabx$long,tabx$lat)
tri
z
f=list.files(dir, pattern = "*plt", full.names = TRUE)[3]
z=as.data.frame(read.table(sep = ",",f,skip=6,stringsAsFactors=FALSE))
z$time = as.POSIXct(paste(z[,6],z[,7]),tz = "GMT")
z = z[,-c(3,5,6,7)]
names(z) = c("lat", "long", "elev", "time")
attributes(z$time)$tzone <- "Asia/Shanghai"
day=as.Date(z$time)
z$day=weekdays(day)
write.table(z, file = "D:/work/Research/location research/trajectory1.csv",row.names=FALSE, sep=",")
#-------------------------------------------------
library("flexclust")
library("geosphere")
tab=read.table(file = "D:/work/Research/location research/trajectory1.csv",header = TRUE,sep = ",")
tab=read.table(file = "D:/work/Research/location research/trajectory1.csv",header = TRUE,sep = ",")
r=6371
x=r*cos(tab$lat) * cos(tab$long)
y=r*cos(tab$lat) * sin(tab$long)
tricart=data.frame(x,y)
plot(tricart)
c2=kcca(tricart,k=3)
image(c2)
points(tricart)
qmplot(long, lat, data =tab, colour = I(’red’), size = I(3), darken = .3)
library("ggplot2", lib.loc="~/R/win-library/3.1")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.1")
install.packages(ggplot2)
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.1")
install.packages("ggplot2")
remove.packages("ggplot2", lib="~/R/win-library/3.1")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.1")
qmplot(long, lat, data =tab, colour = I(’red’), size = I(3), darken = .3)
install.packages("ggmap")
library("ggmap")
library("ggplot2")
qmplot(long, lat, data =tab, colour = I(’red’), size = I(3), darken = .3)
qmplot(long, lat, data =tab, colour = I("red"), size = I(3), darken = .3)
f=list.files(dir, pattern = "*plt", full.names = TRUE)[1]
z=as.data.frame(read.table(sep = ",",f,skip=6,stringsAsFactors=FALSE))
z$time = as.POSIXct(paste(z[,6],z[,7]),tz = "GMT")
z = z[,-c(3,5,6,7)]
names(z) = c("lat", "long", "elev", "time")
attributes(z$time)$tzone <- "Asia/Shanghai"
day=as.Date(z$time)
z$day=weekdays(day)
write.table(z, file = "D:/work/Research/location research/trajectory1.csv",row.names=FALSE, sep=",")
#-------------------------------------------------
library("flexclust")
library("geosphere")
tab=read.table(file = "D:/work/Research/location research/trajectory1.csv",header = TRUE,sep = ",")
# tabx=tab[tab$day!="Sunday" & tab$day!="Saturday",]
# weekdays=table(as.numeric(format.Date(tabx$time,"%H")))
r=6371
x=r*cos(tab$lat) * cos(tab$long)
y=r*cos(tab$lat) * sin(tab$long)
tricart=data.frame(x,y)
plot(tricart)
library("ggmap")
library("ggplot2")
qmplot(long, lat, data =tab, colour = I("red"), size = I(3), darken = .3)
qmplot(long, lat, data =tab, colour = I("red"), size = I(3), darken = .3,zoom = 17)
qmplot(long, lat, data =tab, colour = I("red"), size = I(3), darken = .3)
qmplot(long, lat, data =tab, colour = I("red"), size = I(3), darken = .3,zoom = 12)
qmplot(long, lat, data =tab, colour = I("red"), size = I(3), darken = .3)
qmplot(long[1], lat[1], data =tab, colour = I("red"), size = I(3), darken = .3)
qmplot(long, lat, data =tab[1,], colour = I("red"), size = I(3), darken = .3)
qmplot(long, lat, data =tab[1:10,], colour = I("red"), size = I(3), darken = .3)
setwd("~/")
directory="D:/work/Research/location research/datasets/Geolife/"
setwd("D:/work/Research/location research/datasets/Geolife/")
dirs = list.files(directory)
dirs
z= NULL
f=list.files(dirs, pattern = "*txt", full.names = TRUE)[1]
f
f=list.files(dirs, pattern = "*txt", full.names = TRUE)
f
f=list.files(dirs, pattern = "*plt", full.names = TRUE)[1]
f
dir = paste(dirs[1], "Trajectory", sep = "/")
z= NULL
f=list.files(dirs, pattern = "*plt", full.names = TRUE)[1]
f=list.files(dirs, pattern = "*txt", full.names = TRUE)[1]
f
f=list.files(dirs, pattern = "*txt", full.names = TRUE)
f
dirs = list.files(directory)
dirs
list.files(dirs, pattern = "*txt", full.names = TRUE)
f=list.files(dirs, pattern = ".txt", full.names = TRUE)
f
f=list.files(dirs, pattern = "*txt", full.names = TRUE)
f
z=as.data.frame(read.table(sep = ",","0001.txt",skip=6,stringsAsFactors=FALSE))
z
z=as.data.frame(read.table(sep = ",","0001.txt",stringsAsFactors=FALSE))
length(z)
z=as.data.frame(read.table(sep = ",","0001.txt",stringsAsFactors=FALSE))
length(z)
View(z)
z=as.data.frame(read.table(sep = " ","0001.txt",stringsAsFactors=FALSE))
length(z)
z$time = as.POSIXct(paste(z[,3],z[,4]),tz = "GMT")
z = z[,-c(3,4)]
names(z) = c("lat", "long", "time")
View(z)
day=as.Date(z$time)
z$day=weekdays(day)
write.table(z, file = "D:/work/Research/location research/0001.csv",row.names=FALSE, sep=",")
library("flexclust")
library("geosphere")
tab=read.table(file = "D:/work/Research/location research/0001.csv",header = TRUE,sep = ",")
View(tab)
library("ggmap")
library("ggplot2")
qmplot(long, lat, data =tab, colour = I("red"), size = I(3), darken = .3)
View(tab)
r=6371
x=r*cos(tab$lat) * cos(tab$long)
y=r*cos(tab$lat) * sin(tab$long)
tricart=data.frame(x,y)
plot(tricart)
c2=kcca(tricart,k=3)
image(c2)
points(tricart)
